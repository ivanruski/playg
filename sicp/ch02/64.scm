;; Exercise 2.64. The following procedure list->tree converts an ordered list to
;; a balanced binary tree. The helper procedure partial-tree takes as arguments
;; an integer n and list of at least n elements and constructs a balanced tree
;; containing the first n elements of the list. The result returned by
;; partial-tree is a pair (formed with cons) whose car is the constructed tree
;; and whose cdr is the list of elements not included in the tree.

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (list->tree elements)
  (car (partial-tree elements (length elements))))

(define (partial-tree elts n)
  (if (= n 0)
      (cons '() elts)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elts left-size)))
          (let ((left-tree (car left-result))
                (non-left-elts (cdr left-result))
                (right-size (- n (+ left-size 1))))
            (let ((this-entry (car non-left-elts))
                  (right-result (partial-tree (cdr non-left-elts)
                                              right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elts (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elts))))))))

;; a. Write a short paragraph explaining as clearly as you can how partial-tree
;; works. Draw the tree produced by list->tree for the list (1 3 5 7 9 11).
;;
;; b. What is the order of growth in the number of steps required by list->tree
;; to convert a list of n elements?

;; a. partial-tree works by spliting the elts list into two parts. part one is
;; elements from [0: (n-1)/2], part two is [(n+1)/2: n] then it recursively
;; invokes itself with part one and part two. The results are the left and right
;; sub-tree and the "root" node is the element at n/2.
;;
;; The tree produced by (list->tree '(1 3 5 7 9 11)) is:
;;
;;               5
;;             /   \
;;           1       9
;;            \     / \
;;             3   7  11
;;
;; b. The order of growth in the number of steps is O(n). The recursive call
;; tree generated by partial-tree will have depth of logn, but it has to go
;; through each element in order to build the tree.
